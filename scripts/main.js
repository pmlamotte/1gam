"use strict";

window.stage = new PIXI.Stage(0);

// create a renderer instance.
var renderer = PIXI.autoDetectRenderer(window.innerWidth, window.innerHeight);

// add the renderer view element to the DOM
document.body.appendChild(renderer.view);

window.inputManager = new InputManager();
window.textureFactory = new TextureFactory();
window.physicsManager = new PhysicsManager();
window.camera = new Camera();

textureFactory.load(window.textureAssets, function () {
	window.root = new BaseEntity();
	root.addComponent(physicsManager);
	root.addComponent(camera);
	root.addComponent(entityBuilder.build("attractor"));
	//root.addComponent(entityBuilder.build('debugSmiley'));
	//root.addComponent(entityBuilder.build('player smiley', {position: {x: 500, y: 500}}));
	//addSmileys(7);
	loadLevel("test", function () {
		addHoustons();
	});

	requestAnimFrame(animate);

	function getTimeInSeconds() {
		return Date.now() / 1000;
	}

	var lastTime = getTimeInSeconds();
	var lastDelta = 1;
	function animate() {
		requestAnimFrame(animate);

		var now = getTimeInSeconds();
		var timeElapsed = now - lastTime;
		root.updateComponents(timeElapsed, now);
		lastTime = now;
		lastDelta = timeElapsed;

		// render the stage 
		renderer.render(stage);
	}

	function getWidth() {
		return window.innerWidth;
	}

	function getHeight() {
		return window.innerHeight;
	}

	function addSmileys(count) {
		for (var i = 0; i < count; i++) {
			var options = {
				position: { x: getWidth() * (i / count), y: 1 }
			};
			root.addComponent(entityBuilder.build("smiley", options));
		}
	}

	function addHoustons() {
		var tiles = textureFactory.getTextureTileIds("houston");

		_.each(tiles, function (tile) {
			root.addComponent(entityBuilder.build("smiley", {
				base: {
					position: {
						x: Math.random() * 500,
						y: Math.random() * 200
					}
				},
				SpriteComponent: ["houston", tile]
			}));
		});
	}
});
//# sourceMappingURL=data:application/json;base64,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RUFBRTtBQUM1QixPQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQy9DLFFBQUksRUFBRTtBQUNMLGFBQVEsRUFBRTtBQUNULE9BQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRztBQUN0QixPQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUc7TUFDdEI7S0FDRDtBQUNELHFCQUFtQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7RUFDSDtDQUNELENBQUMsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LnN0YWdlID0gbmV3IFBJWEkuU3RhZ2UoMHgwMDAwMDApO1xuXG4vLyBjcmVhdGUgYSByZW5kZXJlciBpbnN0YW5jZS5cbnZhciByZW5kZXJlciA9IFBJWEkuYXV0b0RldGVjdFJlbmRlcmVyKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuXG4vLyBhZGQgdGhlIHJlbmRlcmVyIHZpZXcgZWxlbWVudCB0byB0aGUgRE9NXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLnZpZXcpO1xuXG53aW5kb3cuaW5wdXRNYW5hZ2VyID0gbmV3IElucHV0TWFuYWdlcigpO1xud2luZG93LnRleHR1cmVGYWN0b3J5ID0gbmV3IFRleHR1cmVGYWN0b3J5KCk7XG53aW5kb3cucGh5c2ljc01hbmFnZXIgPSBuZXcgUGh5c2ljc01hbmFnZXIoKTtcbndpbmRvdy5jYW1lcmEgPSBuZXcgQ2FtZXJhKCk7XG5cbnRleHR1cmVGYWN0b3J5LmxvYWQod2luZG93LnRleHR1cmVBc3NldHMsIGZ1bmN0aW9uKCkge1xuXHRcblx0d2luZG93LnJvb3QgPSBuZXcgQmFzZUVudGl0eSgpO1xuXHRyb290LmFkZENvbXBvbmVudChwaHlzaWNzTWFuYWdlcik7XG5cdHJvb3QuYWRkQ29tcG9uZW50KGNhbWVyYSk7XG5cdHJvb3QuYWRkQ29tcG9uZW50KGVudGl0eUJ1aWxkZXIuYnVpbGQoJ2F0dHJhY3RvcicpKTtcblx0Ly9yb290LmFkZENvbXBvbmVudChlbnRpdHlCdWlsZGVyLmJ1aWxkKCdkZWJ1Z1NtaWxleScpKTtcblx0Ly9yb290LmFkZENvbXBvbmVudChlbnRpdHlCdWlsZGVyLmJ1aWxkKCdwbGF5ZXIgc21pbGV5Jywge3Bvc2l0aW9uOiB7eDogNTAwLCB5OiA1MDB9fSkpO1xuXHQvL2FkZFNtaWxleXMoNyk7XG5cdGxvYWRMZXZlbCgndGVzdCcsIGZ1bmN0aW9uKCkge1xuXHRcdGFkZEhvdXN0b25zKCk7XG5cdH0pO1xuXG5cdHJlcXVlc3RBbmltRnJhbWUoIGFuaW1hdGUgKTtcblxuXHRmdW5jdGlvbiBnZXRUaW1lSW5TZWNvbmRzKCkge1xuXHRcdHJldHVybiBEYXRlLm5vdygpIC8gMTAwMDtcblx0fVxuXG5cdHZhciBsYXN0VGltZSA9IGdldFRpbWVJblNlY29uZHMoKTtcblx0dmFyIGxhc3REZWx0YSA9IDE7XG5cdGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG5cblx0ICAgIHJlcXVlc3RBbmltRnJhbWUoIGFuaW1hdGUgKTtcblxuXHQgICAgdmFyIG5vdyA9IGdldFRpbWVJblNlY29uZHMoKTtcblx0ICAgIHZhciB0aW1lRWxhcHNlZCA9IG5vdyAtIGxhc3RUaW1lO1xuXHQgICAgcm9vdC51cGRhdGVDb21wb25lbnRzKHRpbWVFbGFwc2VkLCBub3cpO1xuXHQgICAgbGFzdFRpbWUgPSBub3c7XG5cdCAgICBsYXN0RGVsdGEgPSB0aW1lRWxhcHNlZDtcblxuXHQgICAgLy8gcmVuZGVyIHRoZSBzdGFnZSAgXG5cdCAgICByZW5kZXJlci5yZW5kZXIoc3RhZ2UpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lkdGgoKSB7XG5cdFx0cmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0SGVpZ2h0KCkge1xuXHRcdHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRTbWlsZXlzKGNvdW50KSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IHtcblx0XHRcdFx0cG9zaXRpb246IHt4OiBnZXRXaWR0aCgpICogKGkgLyBjb3VudCksIHk6IDF9XG5cdFx0XHR9O1xuXHRcdFx0cm9vdC5hZGRDb21wb25lbnQoZW50aXR5QnVpbGRlci5idWlsZCgnc21pbGV5Jywgb3B0aW9ucykpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEhvdXN0b25zKCkge1xuXHRcdHZhciB0aWxlcyA9IHRleHR1cmVGYWN0b3J5LmdldFRleHR1cmVUaWxlSWRzKCdob3VzdG9uJyk7XG5cblx0XHRfLmVhY2godGlsZXMsIGZ1bmN0aW9uKHRpbGUpIHtcblx0XHRcdHJvb3QuYWRkQ29tcG9uZW50KGVudGl0eUJ1aWxkZXIuYnVpbGQoJ3NtaWxleScsIHtcblx0XHRcdFx0YmFzZToge1xuXHRcdFx0XHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRcdFx0XHR4OiBNYXRoLnJhbmRvbSgpICogNTAwLFxuXHRcdFx0XHRcdFx0eTogTWF0aC5yYW5kb20oKSAqIDIwMFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJTcHJpdGVDb21wb25lbnRcIjogW1wiaG91c3RvblwiLCB0aWxlXVxuXHRcdFx0fSkpO1xuXHRcdH0pO1xuXHR9XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=